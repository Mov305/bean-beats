datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  PLATFORM_ADMIN
  SHOP_ADMIN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           UserRole
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  authenticators Authenticator[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  CoffeeShop CoffeeShop[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Artist {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image String
  Album Album[]
  Song  Song[]
}

model Album {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  year     Int?
  image    String?
  artist   Artist? @relation(fields: [artistId], references: [id])
  artistId String? @db.ObjectId
  Song     Song[]
}

model Song {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  artist    Artist?      @relation(fields: [artistId], references: [id])
  album     Album?       @relation(fields: [albumId], references: [id])
  duration  Int
  fileURL   String
  price     Int
  artistId  String?      @db.ObjectId
  albumId   String?      @db.ObjectId
  QueueSong QueueSong[]
}

model QueueSong {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  song          Song        @relation(fields: [songId], references: [id])
  customerName  String
  customerPhone String
  transaction   String
  songId        String      @db.ObjectId
  CoffeeShop    CoffeeShop? @relation(fields: [coffeeShopId], references: [id])
  coffeeShopId  String?     @db.ObjectId
}

model CoffeeShop {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  address             String
  admin               User                  @relation(fields: [adminId], references: [id])
  songs               String[]
  workingHours        Json
  revenueShare        Int
  playingQueue        QueueSong[]
  adminId             String                @db.ObjectId
  CustomerTransaction CustomerTransaction[]
}

model CustomerTransaction {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  status         TransactionStatus
  shop           CoffeeShop        @relation(fields: [shopId], references: [id])
  amount         Int
  requestedSongs String[]
  createdAt      DateTime          @default(now())
  shopId         String            @db.ObjectId
}

model ShopOwnerTransaction {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  status         TransactionStatus
  amount         Int
  createdAt      DateTime          @default(now())
}
